
#define F_CPU 8000000 
#include <avr/io.h> 
#include <util/delay.h> 
#include <avr/interrupt.h> //Controle avec Interrupts 
#include <stdbool.h> 

volatile bool boutonActuel = 0; // 0 = Aucun changement 1 = changement d'Ã©tat
volatile bool boutonPrecedent = 0;

volatile uint8_t minuterieExpiree;

volatile uint8_t boutonPoussoir;

ISR ( TIMER1_OVF_vect ) {
minuterieExpiree = 1;
}

ISR ( INT0_vect ) {

boutonPoussoir = 1;
}


void partirMinuterie ( uint16_t duree ) {

minuterieExpiree = 0;

// mode CTC du timer 1 avec horloge divisée par 1024

// interruption après la durée spécifiée

TCNT1 = 65536 - duree ;

TCCR1A = 0b00000000 ; // ajuster le timer a la normale bit 0 et 1

TCCR1B = 0b00000101 ; // prediviseur par 1024 et  ajuster le timer a la normale bit 3

TIMSK1 = 0x01 ; // activer le TOV0
}


void initialisation ( void ) {
// cli est une routine qui bloque toutes les interruptions.
// Il serait bien mauvais d'Ãªtre interrompu alors que
// le microcontroleur n'est pas prÃªt...
cli ();
// configurer et choisir les ports pour les entrÃ©es
// et les sorties. DDRx... Initialisez bien vos variables
DDRB = 0xff; // PORT B est en mode sortie
PORTB = 0x00; 
// cette procÃ©dure ajuste le registre EIMSK
// de lâ€™ATmega324PA pour permettre les interruptions externes
EIMSK |= (1 << INT0) ;
// il faut sensibiliser les interruptions externes aux
// changements de niveau du bouton-poussoir
// en ajustant le registre EICRA
EICRA = 0X03; //QUESTION
// sei permet de recevoir Ã  nouveau des interruptions.
sei ();
}


int main()
{
  initialisation();

 _delay_ms(10000);
  PORTB = 0x02; //LED rouge
 _delay_ms(100);
 PORTB = 0x00; //LED ETEINTE
 boutonPoussoir = 0;
  partirMinuterie(7812); //1 SECONDE
  do {
       
  } 
  while(minuterieExpiree == 0 && boutonPoussoir == 0) ;

  if (minuterieExpiree)
    PORTB=0x02;
  else if (boutonPoussoir)
         PORTB=0x01;
         
  return 0; 
}


