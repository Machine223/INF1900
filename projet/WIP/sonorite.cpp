
#include <avr/io.h>
#include "sonorite.h"
#include "clock.h"


const double tabMus[] = { 
	16.3515978313,
	17.3239144361,
	18.3540479948,
	19.4454364826,
	20.6017223071,
	21.8267644646,
	23.1246514195,
	24.4997147489,
	25.9565435987,
	27.5000000000,
	29.1352350949,
	30.8677063285,
	32.7031956626,
	34.6478288721,
	36.7080959897,
	38.8908729653,
	41.2034446141,
	43.6535289291,
	46.2493028390,
	48.9994294977,
	51.9130871975,
	55.0000000000,
	58.2704701898,
	61.7354126570,
	65.4063913251,
	69.2956577442,
	73.4161919794,
	77.7817459305,
	82.4068892282,
	87.3070578583,
	92.4986056779,
	97.9988589954,
	103.8261743950,

	
	110.0, 116.5409404, 123.4708253, 130.8127827, 
	130.5913155, 146.832384, 155.5634919, 164.8137785, 174.6141157, 
	184.9972114, 195.997718, 207.6523488, 220.0, 233.0818808, 
	246.9416506, 261.6255653, 277.182631, 293.6647679, 311.1269837, 
	329.6275569, 349.2282314, 369.9944227, 391.995436, 415.3046976, 
	440.0, 466.1637615, 493.8833013, 523.2511306, 554.365262, 
	587.3295358, 622.2539674, 659.2551138, 69.4564629, 739.9888454, 
	783.990872, 830.6093952, 880.0, 

	932.3275230362,
	987.7666025122,
	1046.5022612024,
	1108.7305239075,
	1174.6590716696,
	1244.5079348883,
	1318.5102276515,
	1396.9129257320,
	1479.9776908465,
	1567.9817439270,
	1661.2187903198,
	1760.0000000000,
	1864.6550460724,
	1975.5332050245,
	2093.0045224048,
	2217.4610478150,
	2349.3181433393,
	2489.0158697766,
	2637.0204553030,
	2793.8258514640,
	2959.9553816931,
	3135.9634878540,
	3322.4375806396,
	3520.0000000000,
	3729.3100921447,
	3951.0664100490,
	4186.0090448096,
	4434.9220956300,
	4698.6362866785,
	4978.0317395533,
	5274.0409106059,
	5587.6517029281,
	5919.9107633862,
	6271.92697571,
	6644.8751612791,
	7040.0000000000,
	7458.6201842894,
	7902.1328200980,
	8372.0180896192,
	8869.8441912599,
	9397.2725733570,
	9956.0634791066,
	10548.0818212118,
	11175.3034058561,
	11839.8215267723,
	12543.8539514160
	};

/*const double periode[] = {
4.54545454545455,4.29033778491762,4.04953962791165,3.82225643297141,
3.60772966356503,3.405243356538,3.21412173266696,3.03372694129618,
2.86345693157929,2.70274344318825,2.5510501097937,2.40787066899808,
2.27272727272727,2.14516889245881,2.02476981395501,1.91112821648571,
1.80386483178186,1.702621678269,1.60706086633296,1.51686347064763,
1.43172846578964,1.35137172159413,1.27552505489718,1.20393533449933,
1.13636363636364,1.07258444622917,1.01238490697771,0.955564108242853,
0.901932415891094,0.8513108391345,0.803530433166482,0.758431735323929,
0.715864232894822,0.675685860796972,0.637762527448506,0.601967667249592,
0.568181818181818,
 };
*/

/**********************************************************************
* Fonction: void PWMsonorite(uint8_t indice)
* Description: Le timer 0 en mode CTC est utilise pour le son avec PWM 
* Paramètres: la période de temps actifs de la note (nomme : indice)
* Retour: Aucun
**********************************************************************/
void Sonorite:: PWMSonorite (uint8_t indice)
{
	// clock::setPWM(indice,0,2);

	// COM0B1 , COM0B0 , WGM01, WGM00 sont actifs
	// COM0B1/C0M0B0 : set OC0B on compare match, clear OC0B at BOTTOM
	// WGM02/WGM01/WGM01 : Fast PWM, top = OCR0A
	TCCR0A = 0x33;
	// CS01 , CS00 et WGM02 sont actifs 
	// CS01/CS00 : Prescaler à 64
	TCCR0B = 0x0D;
	// OCR0A en MAX	
	OCR0A = indice;
	OCR0B = indice / 2; // PWM de 50%

}

/**********************************************************************
* Fonction: uint8_t tempsActif(uint8_t indice)
* Description: Calcul le temps actif d'une note selon sa fréquence
* Paramètres: la nième note du tableau de fréquence (de 45 à 127)
* Retour: la période de temps actifs de la note choisie
**********************************************************************/
uint8_t Sonorite:: tempsActif(uint8_t note)
{
	//double frequenceChoisie = tabMus[indice-12];
	uint8_t tempsActif = (uint8_t)((1 / tabMus[note-12]) * (8000000 / 256));;
	//retourne le temps actif selon la note
	return tempsActif;
}

/**********************************************************************
* Fonction: void arreterSon() 
* Description: Arrêter le son
* Paramètres: Aucun
* Retour: Auncun
**********************************************************************/
void Sonorite:: arreterSon() 
{
	OCR2A = 0;
	TCCR0B &= ~(_BV(CS02));      //Desactivation du compteur.
}

/**********************************************************************
* Fonction: void note(uint8_t indice)
* Description: fait la fonction PWMSonorite
* Paramètres: la nième note du tableau de fréquence (de 45 à 127)
* Retour: Auncun
**********************************************************************/ 
void Sonorite::jouerNote(uint8_t indice)
{
	TCCR0B |= _BV(CS02);                //Activation du compteur.
	PWMSonorite(tempsActif(indice));
}


// void Sonorite::jouerSonorite(uint8_t indice){

// 	clock::setTimerCTC(periode[indice-45],1);
// }